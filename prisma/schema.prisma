generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  timezone  String?
  partnerId String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  partner          User?     @relation("Partnership", fields: [partnerId], references: [id])
  partnerOf        User?     @relation("Partnership")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  accounts         Account[]
  sessions         Session[]
}

model Message {
  id          String   @id @default(cuid())
  content     String
  imageUrl    String?
  scheduledAt DateTime
  deliveredAt DateTime?
  isDelivered Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  senderId   String
  receiverId String
  sender     User   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([scheduledAt])
  @@index([isDelivered])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}